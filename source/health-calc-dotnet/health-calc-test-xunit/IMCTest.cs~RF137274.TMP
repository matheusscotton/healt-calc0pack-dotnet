
using Xunit;

using health_calc_pack_dotnet;
using System;

namespace health_calc_test_xunit
{
    public class IMCTest 
    {
        [Fact]
        public void When_RequestIMCCalcWithValidData_ThenReturnIMCIndex()
        {
            //Arrange
            var Imc = new IMC();
            var Heigth = 1.68;
            var Weigth = 85;
            var Expected = 30.12;

            //Act
            var Result = Imc.CalcularIMC(Heigth, Weigth);

            //Assert
            Assert.Equal(Expected, Result);
        }


        [Fact]
        public void When_RequestIMCCalcWithValidData_ThenReturnIMCIndexWithRangeAssert()
        {
            //Arrange
            var Imc = new IMC();
            var Heigth = 1.68;
            var Weigth = 85;
            var ExpectedMin = 30.10;
            var ExpectedMax = 30.14;

            //Act
            var Result = Imc.CalcularIMC(Heigth, Weigth);

            //Assert
            Assert.InRange(Result,ExpectedMin,ExpectedMax);
        }

        [Fact]
        public void When_RequestIMCCalcWithInvalidData_ThenReturnIMCNaN()
        {
            //Arrange
            var Imc = new IMC();
            var Heigth = 0.0;
            var Weigth = 0.0;
            var Expected = double.NaN;

            //Act
            var Result = Imc.CalcularIMC(Heigth, Weigth);

            //Assert
            Assert.Equal(Expected, Result);
        }


        [Fact]
        public void When_RequestIMCCalcWithInvalidData_ThenReturnIMCException()
        {
            //Arrange
            var Imc = new IMC();
            var Heigth = 0;
            var Weigth = 85;

            //Act and Assert
            Assert.Throws<Exception>(() => Imc.CalcularIMC(Heigth, Weigth));
        }


    }
}
